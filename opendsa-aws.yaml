AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Sample Template Rails_Single_Instance: Create a Ruby on
  Rails stack using a single EC2 instance with a local MySQL database for
  storage. This template demonstrates using the AWS CloudFormation bootstrap
  scripts to install the packages and files necessary to deploy a Rails
  application. This example creates a simple hello world application from the
  template. **WARNING** This template creates an Amazon EC2 instance. You will
  be billed for the AWS resources used if you create a stack from this template.
Parameters:
  Email:
    Type: String
    Default: example@mail.com
    Description: Email address for important account notifications. Please provide your instiution .edu email address.
  DomainName:
    Type: String
    Default: opendsa.net
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: opendsa2
  DBName:
    Description: MySQL database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: opendsa
  DBUser:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    Default: opendsa
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: opendsa
  DBRootPassword:
    NoEcho: 'true'
    Description: Root password for MySQL
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
    Default: root
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: ' The IP address range that can be used to SSH to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0ac80df6eff0e70b5
    us-west-2:
      HVM64: ami-053bc2e89490c5ab7
    us-west-1:
      HVM64: ami-0d705db840ec5f0c5
    eu-west-1:
      HVM64: ami-089cc16f7f08c4457
    eu-west-2:
      HVM64: ami-00f6a0c18edb19300
    eu-west-3:
      HVM64: ami-0e11cbb34015ff725
    eu-central-1:
      HVM64: ami-0d359437d1756caa8
    eu-north-1:
      HVM64: ami-0f920d75f0ce2c4bb
    ap-southeast-1:
      HVM64: ami-063e3af9d2cc7fe94
    ap-southeast-2:
      HVM64: ami-0bc49f9283d686bab
    ap-south-1:
      HVM64: ami-02d55cb47e83a99a0
    us-east-2:
      HVM64: ami-0a63f96e85105c6d3

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref VpcCIDR
      MapPublicIpOnLaunch: true

  EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      Description: Interface for controlling traffic such as SSH
      GroupSet:
      - !Ref WebServerSecurityGroup
      SourceDestCheck: true
      Tags:
      - Key: Network
        Value: Control

  AssociateControlPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      NetworkInterfaceId: !Ref NetworkInterface

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP, HTTPS, and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation

  WebServer:
    Type: AWS::EC2::Instance
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          full_install:
            - install_and_enable_cfn_hup
            - install_dependencies
            - install_ruby_2_4_0
            - install_rails_4
            - install_mysql_5_7
            - create_opendsa_db
            - clone_install_opendsa
            - opendsa_database_connection
            - install_nginx_passenger
            - configure_nginx_passenger
            - generate_certificate
            - configure_ssl_certificate
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServer.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets full_install --region ${AWS::Region}
                runas=root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
        install_dependencies:
          files:
            /tmp/install_dependencies:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'
                sudo apt-get update
                sudo add-apt-repository -y universe
                sudo apt-get update
                sudo apt-get install -y python
                sudo apt-get install -y python-dev
                sudo apt-get install -y python-pip
                sudo apt-get install -y python-sphinx
                sudo apt-get install -y python-feedvalidator
                sudo apt-get install -y python-software-properties
                sudo apt-get install -y software-properties-common
                sudo apt-get install -y ec2-instance-connect
                sudo apt-get install -y curl
                sudo apt-get install -y gnupg
                sudo apt-get install -y zlib1g-dev
                sudo apt-get install -y build-essential
                sudo apt-get install -y libmysqlclient-dev
                sudo apt-get install -y dkms
                sudo apt-get install -y libxslt-dev
                sudo apt-get install -y libpq-dev
                sudo apt-get install -y libmariadbclient-dev
                sudo apt-get install -y libcurl4-gnutls-dev
                sudo apt-get install -y libevent-dev
                sudo apt-get install -y libffi-dev
                sudo apt-get install -y libssl-dev
                sudo apt-get install -y stunnel4
                sudo apt-get install -y libsqlite3-dev
                sudo apt-get install -y libreadline-dev
                sudo apt-get install -y libyaml-dev
                sudo apt-get install -y libxml2
                sudo apt-get install -y libxml2-dev
                sudo apt-get install -y libxslt1-dev
                sudo apt-get install -y libcurl4-openssl-dev
                sudo apt-get install -y dirmngr
                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_dependencies:
              command: /tmp/install_dependencies > /var/log/odsa_install_dependencies.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_ruby_2_4_0:
          files:
            /tmp/install_ruby:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'
                gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
                curl -sSL https://get.rvm.io -o /tmp/rvm.sh
                cat /tmp/rvm.sh | bash -s stable --rails
                source /home/ubuntu/.rvm/scripts/rvm
                rvm install 2.4
                rvm --default use 2.4
                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_ruby:
              command: /tmp/install_ruby > /var/log/odsa_install_ruby.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_rails_4:
          files:
            /tmp/install_rails:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                gem install rails -v 4 --no-document
                gem install bundler:1.17.3 --no-document

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_rails:
              command: /tmp/install_rails > /var/log/odsa_install_rails.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_mysql_5_7:
          files:
            /tmp/install_mysql:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                sudo apt-get install -y mysql-server-5.7

                sudo mysql <<SQL
                ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '${DBRootPassword}';
                FLUSH PRIVILEGES;
                SQL

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_mysql:
              command: /tmp/install_mysql > /var/log/odsa_install_mysql.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        create_opendsa_db:
          files:
            /tmp/create_opendsa_db:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                mysql -uroot -p${DBRootPassword} <<SQL
                CREATE DATABASE ${DBName} DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
                GRANT ALL PRIVILEGES ON ${DBName}.* to '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';
                FLUSH PRIVILEGES;
                SQL

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_create_opendsa_db:
              command: /tmp/create_opendsa_db > /var/log/odsa_create_opendsa_db.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        clone_install_opendsa:
          files:
            /tmp/clone_install_opendsa:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                git clone --depth=1 https://github.com/OpenDSA/OpenDSA.git /home/ubuntu/OpenDSA
                cd /home/ubuntu/OpenDSA
                make pull


                # install OpenDSA dependencies
                pip install -r /home/ubuntu/OpenDSA/requirements.txt --upgrade
                pip install --upgrade beautifulsoup4

                # clone and install OpenDSA-LTI dependencies
                git clone --depth=1 https://github.com/hosamshahin/OpenDSA-LTI.git /home/ubuntu/OpenDSA-LTI
                cd /home/ubuntu/OpenDSA-LTI
                bundle install --deployment --without development test

                # make a link from OpenDSA into OpenDSA-LTI
                ln -s /home/ubuntu/OpenDSA /home/ubuntu/OpenDSA-LTI/public
                ln -s /home/ubuntu/OpenDSA/RST /home/ubuntu/OpenDSA-LTI
                ln -s /home/ubuntu/OpenDSA/config /home/ubuntu/OpenDSA-LTI/Configuration

                # Install Java and Ant
                sudo apt-get install -y default-jre
                sudo apt-get install -y ant

                # install nodejs and npm
                curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
                sudo apt-get install -y nodejs

                sudo npm install -g jshint
                sudo npm install -g csslint
                sudo npm install -g jsonlint
                sudo npm install -g uglify-js

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_clone_install_opendsa:
              command: /tmp/clone_install_opendsa > /var/log/odsa_clone_install_opendsa.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        opendsa_database_connection:
          files:
            /tmp/database.yml:
              content: !Sub |
                production:
                  adapter: mysql2
                  database: ${DBName}
                  username: ${DBUser}
                  password: ${DBPassword}
                  host: localhost
                  strict: false

                development:
                  adapter: mysql2
                  database: ${DBName}
                  username: ${DBUser}
                  password: ${DBPassword}
                  host: localhost
                  strict: false

              mode: '000500'
              owner: ubuntu
              group: ubuntu
            /tmp/secrets_init.yml:
              content: !Sub |
                production:
                  secret_key_base: prod_secret_string
                development:
                  secret_key_base: dev_secret_string
              mode: '000700'
              owner: ubuntu
              group: ubuntu
            /tmp/opendsa_dependencies:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                cd /home/ubuntu/OpenDSA-LTI

                mv -f /tmp/database.yml /home/ubuntu/OpenDSA-LTI/config/
                sed "s/prod_secret_string/$(bundle exec rake secret)/" /tmp/secrets_init.yml > /tmp/secrets_prod.yml
                sed "s/dev_secret_string/$(bundle exec rake secret)/" /tmp/secrets_prod.yml > /tmp/secrets.yml
                mv -f /tmp/secrets.yml /home/ubuntu/OpenDSA-LTI/config/

                chmod 700 /home/ubuntu/OpenDSA-LTI/config /home/ubuntu/OpenDSA-LTI/db
                chmod 600 /home/ubuntu/OpenDSA-LTI/config/database.yml /home/ubuntu/OpenDSA-LTI/config/secrets.yml

                RAILS_ENV=production
                bundle exec rake db:drop
                bundle exec rake db:create
                bundle exec rake db:schema:load
                bundle exec rake db:seed
                bundle exec rake db:populate
                bundle exec rake assets:precompile
                /home/ubuntu/OpenDSA-LTI/bin/delayed_job -n 2 start
                EOF

              mode: '000500'
              owner: ubuntu
              group: ubuntu
            /etc/rc.local:
              content: !Sub |
                #!/bin/sh -e

                RAILS_ENV=production
                su -s /bin/bash - ubuntu -c "cd /home/ubuntu/OpenDSA-LTI; RAILS_ENV=production bundle exec rake jobs:work &"
              mode: '000700'
              owner: root
              group: root
          commands:
            01_opendsa_dependencies:
              command: /tmp/opendsa_dependencies > /var/log/odsa_opendsa_dependencies.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        install_nginx_passenger:
          files:
            /tmp/install_nginx_passenger:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                sudo apt-get update
                sudo apt-get install -y nginx
                sudo ufw allow 'Nginx FULL'
                sudo ufw status

                sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 561F9B9CAC40B2F7
                sudo apt-get install -y apt-transport-https ca-certificates

                sudo sh -c 'echo deb https://oss-binaries.phusionpassenger.com/apt/passenger bionic main > /etc/apt/sources.list.d/passenger.list'
                sudo apt-get update
                sudo apt-get install -y libnginx-mod-http-passenger

                if [ ! -f /etc/nginx/modules-enabled/50-mod-http-passenger.conf ]; then sudo ln -s /usr/share/nginx/modules-available/mod-http-passenger.load /etc/nginx/modules-enabled/50-mod-http-passenger.conf ; fi
                sudo ls /etc/nginx/conf.d/mod-http-passenger.conf

                sudo service nginx restart

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_install_nginx_passenger:
              command: /tmp/install_nginx_passenger > /var/log/odsa_install_nginx_passenger.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        configure_nginx_passenger:
          files:
            /tmp/nginx.conf:
              content: !Sub |
                user ubuntu;
                worker_processes auto;
                pid /run/nginx.pid;
                include /etc/nginx/modules-enabled/*.conf;

                events {
                        worker_connections 768;
                        # multi_accept on;
                }

                http {
                        ##
                        # Basic Settings
                        ##

                        sendfile on;
                        tcp_nopush on;
                        tcp_nodelay on;
                        keepalive_timeout 65;
                        types_hash_max_size 2048;
                        # server_tokens off;

                        server_names_hash_bucket_size 64;
                        # server_name_in_redirect off;

                        include /etc/nginx/mime.types;
                        default_type application/octet-stream;

                        ##
                        # SSL Settings
                        ##

                        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
                        ssl_prefer_server_ciphers on;

                        ##
                        # Logging Settings
                        ##

                        access_log /var/log/nginx/access.log;
                        error_log /var/log/nginx/error.log;

                        ##
                        # Gzip Settings
                        ##

                        gzip on;

                        # gzip_vary on;
                        # gzip_proxied any;
                        # gzip_comp_level 6;
                        # gzip_buffers 16 8k;
                        # gzip_http_version 1.1;
                        # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

                        ##
                        # Virtual Host Configs
                        ##

                        include /etc/nginx/conf.d/*.conf;
                        include /etc/nginx/sites-enabled/*;
                }
              mode: '000644'
              owner: root
              group: root
            /tmp/mod-http-passenger.conf:
              content: !Sub |
                passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
                passenger_ruby /home/ubuntu/.rvm/gems/ruby-2.4.9/wrappers/ruby;
              mode: '000644'
              owner: root
              group: root
            /tmp/default:
              content: !Sub |
                server {
                        listen 80;
                        listen [::]:80;
                        server_name ${DomainName};

                        passenger_enabled on;
                        passenger_ruby /home/ubuntu/.rvm/gems/ruby-2.4.9/wrappers/ruby;

                        rails_env    production;
                        root         /home/ubuntu/OpenDSA-LTI/public;

                        # redirect server error pages to the static page /50x.html
                        error_page   500 502 503 504  /50x.html;
                        location = /50x.html {
                            root   html;
                        }
                }
              mode: '000644'
              owner: root
              group: root
            /tmp/configure_nginx_passenger:
              content: !Sub |
                #!/bin/bash
                mv -f /tmp/default /etc/nginx/sites-available/
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_configure_nginx_passenger:
              command: mv -f /tmp/nginx.conf /etc/nginx/
              cwd: /home/ubuntu/
              ignoreErrors: "true"
            02_configure_nginx_passenger:
              command: mv -f /tmp/mod-http-passenger.conf /etc/nginx/conf.d/
              cwd: /home/ubuntu/
              ignoreErrors: "true"
            03_configure_nginx_passenger:
              command: /tmp/configure_nginx_passenger > /var/log/odsa_configure_nginx_passenger.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
            04_configure_nginx_passenger:
              command: sudo service nginx restart
              cwd: /home/ubuntu/
              ignoreErrors: "true"
        generate_certificate:
          files:
            /tmp/01_generate_certificate_init:
              content: !Sub |
                #!/bin/bash
                su ubuntu << 'EOF'

                source .bash_profile
                sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt -subj "/C=US/ST=Virginia/L=Blacksburg/O=VT/OU=CS/CN=DomainName/emailAddress=opendsa@cs.vt.edu"

                EOF
              mode: '000500'
              owner: ubuntu
              group: ubuntu
            /tmp/02_generate_certificate:
              content: !Sub |
                #!/bin/bash
                sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096
              mode: '000500'
              owner: ubuntu
              group: ubuntu
            /etc/nginx/snippets/self-signed.conf:
              content: !Sub |
                ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
                ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
              mode: '000644'
              owner: root
              group: root
            /etc/nginx/snippets/ssl-params.conf:
              content: !Sub |
                ssl_protocols TLSv1.2;
                ssl_prefer_server_ciphers on;
                # ssl_dhparam /etc/nginx/dhparam.pem;
                ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
                ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
                ssl_session_timeout  10m;
                ssl_session_cache shared:SSL:10m;
                ssl_session_tickets off; # Requires nginx >= 1.5.9
                ssl_stapling on; # Requires nginx >= 1.3.7
                ssl_stapling_verify on; # Requires nginx => 1.3.7
                resolver 8.8.8.8 8.8.4.4 valid=300s;
                resolver_timeout 5s;
                # Disable strict transport security for now. You can uncomment the following
                # line if you understand the implications.
                # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
                add_header X-Frame-Options DENY;
                add_header X-Content-Type-Options nosniff;
                add_header X-XSS-Protection "1; mode=block";
              mode: '000644'
              owner: root
              group: root
          commands:
            00_generate_certificate:
              command: sed "s/DomainName/$(curl http://169.254.169.254/latest/meta-data/public-hostname)/" /tmp/01_generate_certificate_init > /tmp/01_generate_certificate
              cwd: /home/ubuntu/
              ignoreErrors: "true"
            01_generate_certificate:
              command: sudo chown ubuntu:ubuntu /tmp/01_generate_certificate && sudo chmod 500 /tmp/01_generate_certificate
              cwd: /tmp
              ignoreErrors: "true"
            02_generate_certificate:
              command: /tmp/01_generate_certificate > /var/log/odsa_01_generate_certificate.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
            # 02_generate_certificate:
            #   command: /tmp/02_generate_certificate > /var/log/odsa_02_generate_certificate.log
            #   cwd: /home/ubuntu/
            #   ignoreErrors: "true"
        configure_ssl_certificate:
          files:
            /tmp/default_init:
              content: !Sub |
                server {
                  server_name DomainName;

                  passenger_enabled on;
                  passenger_ruby /home/ubuntu/.rvm/gems/ruby-2.4.9/wrappers/ruby;

                  rails_env    production;
                  root         /home/ubuntu/OpenDSA-LTI/public;

                  # redirect server error pages to the static page /50x.html
                  error_page   500 502 503 504  /50x.html;
                  location = /50x.html {
                      root   html;
                  }

                  listen [::]:443 ssl ipv6only=on;
                  listen 443 ssl;
                  include snippets/self-signed.conf;
                  include snippets/ssl-params.conf;
                }
                server {
                    if ($host = DomainName) {
                        return 301 https://$host$request_uri;
                    }
                        listen 80;
                        listen [::]:80;
                        server_name DomainName;
                    return 404;
                }
              mode: '000644'
              owner: root
              group: root
            /tmp/configure_ssl_certificate:
              content: !Sub |
                #!/bin/bash
                sed "s/DomainName/$(curl http://169.254.169.254/latest/meta-data/public-hostname)/" /tmp/default_init > /tmp/default
                mv -f /tmp/default /etc/nginx/sites-available/
              mode: '000500'
              owner: ubuntu
              group: ubuntu
          commands:
            01_configure_ssl_certificate:
              command: /tmp/configure_ssl_certificate > /var/log/odsa_configure_ssl_certificate.log
              cwd: /home/ubuntu/
              ignoreErrors: "true"
            02_configure_ssl_certificate:
              command: sudo service nginx restart && sudo reboot
              cwd: /home/ubuntu/
              ignoreErrors: "true"
    Properties:
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref NetworkInterface
          DeviceIndex: 0
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y python-pip
          apt-get install -y python-setuptools
          mkdir -p /opt/aws/bin
          python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServer --configsets full_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServer --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT2H

Outputs:
  WebsiteURL:
    Value: !Sub http://${WebServer.PublicDnsName}
    Description: URL for newly created Rails application
